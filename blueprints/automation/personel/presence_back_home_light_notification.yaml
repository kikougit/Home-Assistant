#blueprint:
#  name: zzz beta - allumer des lumières sur retour au domicile (test)
################################################################################################################
### automation créer 20230910
################################################################################################################
### Objectif :  Allumer des lunières lors d'un retour au domicile d'une personne
###             Notifier des appareils lors de l'activation de l'automatisation
###             et lorsqu'on les lumières sont allumées par une annonce vocal
###             sur une liste d'appareils
###             mode debug trace une notification persistante (une seule)
################################################################################################################
### Evolution a étudier : notifier seulement l'appareil déclenchant l'execution
################################################################################################################
### Evolution / Date
###   20230917 - ajout d'une option pour notifier seulement la personne qui déclenche l'automatisation
###   20230923 - modification pour utiliser le text des messages dans le blueprint
###              et pas en input_text modifiable depuis lovelace 
###   20230924 - ajout des états 'from null-to home' dans la zone trigger pour limiter le nombre de déclenchement (maj attribut?)
###              de l'automatisme sans rien faire (maj attribut?)
################################################################################################################


blueprint:
  name: allumer des lumières sur retour au domicile
  description: >
    Allumer des lunières lors d'un retour au domicile d'une personne 
    **Option:** *déclenchement en fonction de l'élévation du soleil,  
    envoyer une notification a une liste de personne(s) ou seulement la personne de retour.*
  domain: automation
  input:

    person_entity:
      name: personne(s)
      description: Personnes à suivre pour activer l'automatisation
      selector:
        entity:
          domain: person
          multiple: true
    light_to_switch_on:
      name: lumière
      description: Lampes/groupes de lampes à allumer
      selector:
        entity:
          domain: light
          multiple: true
    trig_notif:
      name: Notifier des téléphones Mobile
      description: Envoyer une notification vocale
      default: false
      selector:
        boolean:
    notif_trig_device:
      name: Notifier seulement appareil déclenchant
      description: Envoyer une notification vocale seulement à l'appareil de la personne déclenchant l'automatisme
      default: true
      selector:
        boolean:
    message_general:
      name: message de début des notifications
      description: début du message qui sera notifier à chaque annonce. ce message est complété par le *friendly_name* de la personne déclanchant l'automatisation.
      selector:
        text:
          suffix: "*nom de la personne*"
  #      entity:
  #        domain: input_text
    message_action:
      name: message lorsque l'action est déclenchée
      description: "préciser la zone, l'équipement pour rendre l'annonce compréhensible."
      selector:
#        entity:
#          domain: input_text    
        text:
          prefix: "les lumières "
          suffix: " viennent d'être allumées."
    notify_device:
      name: Appareils notifiés
      description: liste d'appareil(s) à notifier lors de l'activation de l'automatisation (si pas en mode seulement appareil déclenchant)
      default: []
      selector:
        device:
          integration: mobile_app
          multiple: true
    trig_sun_elevation:
      name: Déclenchement avec élévation soleil
      description: déclenchement de l'automatisation en fonction de l'élévation du soleil
      default: false
      selector:
        boolean:
    sun_elevation:
      name: Hauteur max soleil
      description: Seuil maximum d'élévation du soleil permettant de déclencher l'automatisation
      default: 10
      selector:
        number:
          min: -70
          max: 70
          unit_of_measurement: degrées
    trig_debug:
      name: debug - notification App Mobile
      description: activer la notification persistante pour voir des traces de l'éxécution
      default: false
      selector:
        boolean:

trigger:
  platform: state
  entity_id: !input person_entity
  ##20230924
  from: null
  to: home
variables:
  my_person_entity: '{{trigger.entity_id}}'
  my_person_name: '{{ states[my_person_entity].name }}'
  #my_person_friendly_name: '{{states[my_person_entity].friendly_name}}'  
  my_person_friendly_name: "{{state_attr(my_person_entity, 'friendly_name')}}"
  my_device_notif: "{{state_attr(my_person_entity, 'source')}}"
  zone_state: "{{states[my_person_entity].state }}"
  my_sun_condition: !input trig_sun_elevation
  my_elevation: !input sun_elevation
  my_trig_notif: !input trig_notif
  my_notif_trig_device: !input notif_trig_device
  my_debug: !input trig_debug
  my_message_general: !input message_general
  my_message_action: !input message_action
condition:
  condition: template
  #value_template: "{{ trigger.from_state.state != 'zone_state' and trigger.to_state.state == 'zone_state' }}"
  value_template: >-
    {{ trigger.from_state.state != trigger.to_state.state and trigger.to_state.state == "home" }}
action:
### fonction trace debug
  - alias: trace debug - notification persistante
    if:
      - condition: template
        value_template: "{{ my_debug }}"
    then:
      - service: persistent_notification.create
        data:
          notification_id: "light zone"
          title: debug - allumer des lumières sur retour au domicile (test)
          message: |
            Automation déclenchée {{alias}}- sun_trig:({{ my_sun_condition }} ), 
            sun_elevation_trig: {{my_elevation}} 

### construction message part1
  - alias: build message part 1 to notify each device selected
    if:
      - condition: template
        value_template: "{{ my_trig_notif }}"
    then:
        - service: input_text.set_value
          data:
            value: "{{my_message_general}} {{ my_person_friendly_name }}. "
#            value: >
#              {{states[my_message_general].state}} {{ my_person_friendly_name }}
          target:
            entity_id: input_text.message_automation_back_to_home

#### allumer les lumières
  - alias: allumer les lumières
    if: 
      condition: or
      conditions:
        - condition: not
          conditions:
            - condition: template
              value_template: "{{ my_sun_condition }}"
        - condition: and
          conditions:
            - condition: template
              value_template: "{{ my_sun_condition }}"
            - condition: numeric_state
              entity_id: sensor.sun_elevation
              below: !input 'sun_elevation'
    then: 
      - alias: allumer les lumières si les conditions sont vrais
        service: light.turn_on
        data: {}
        target:
          entity_id: !input light_to_switch_on
### construction message part 2
      - alias: build message part 2 to notify each device selected
        service: input_text.set_value
        data:
#          value: >
#            {{ states('input_text.message_automation_back_to_home') ~ ". " ~ "Pour information les lumières " 
#            ~ states[my_message_action].state ~ " viennent d'être allumées!" }}
          value: >
            {{states('input_text.message_automation_back_to_home') ~ ". " ~ 
            "Pour information les lumières " ~ my_message_action ~ " viennent d'etre allumées."}}

        target:
          entity_id: input_text.message_automation_back_to_home

#### notification vocale
  - alias: Send a notification to each device
    if:
      - condition: template
        value_template: "{{ my_trig_notif }}"
    then:     
      # le tiger est sur notifié
      if:
        - condition: template
          value_template: "{{ my_notif_trig_device }}"
      then:    
        # le tiger est sur notifier seulement l'appareil déclenchant
        # notification message vocale
        - service: "notify.mobile_app_{{ device_attr(my_device_notif, 'name') | slugify }}"
          data:
            message: TTS
            data:
              confirmation: true
              ttl: 1
              priority: high
              channel: alarm_stream_max
              media_stream: alarm_stream_max
              tts_text: >
                {{ states('input_text.message_automation_back_to_home') }}
        #Notification message texte
        - service: "notify.mobile_app_{{ device_attr(my_device_notif, 'name') | slugify }}"
          data:
            title: Home Assistant Information
            message: >
                {{ states('input_text.message_automation_back_to_home') }}
            data:
              confirmation: true
              ttl: 1
              priority: high
              channel: alarm_stream_max
              media_stream: alarm_stream_max
              color: "#2DF56D"
              subject: "message"
              
      else:
        repeat:
          for_each: !input notify_device
          sequence:
            #Notification message vocale
            - service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
              data:
                message: TTS
                data:
                  confirmation: true
                  ttl: 1
                  priority: high
                  channel: alarm_stream_max
                  media_stream: alarm_stream_max
                  tts_text: >
                    {{ states('input_text.message_automation_back_to_home') }}
            #Notification message texte
            - service: "notify.mobile_app_{{ device_attr(repeat.item, 'name') | slugify }}"
              data:
                title: Home Assistant Information
                message: >
                    {{ states('input_text.message_automation_back_to_home') }}
                data:
                  confirmation: true
                  ttl: 1
                  priority: high
                  channel: alarm_stream_max
                  media_stream: alarm_stream_max
                  color: "#2DF56D"
                  subject: "message"            
### fonction trace debug
  - alias: trace debug - notification persistante
    if:
      - condition: template
        value_template: "{{ my_debug }}"
    then:
      - service: notify.persistent_notification
        data:
          title: debug - allumer des lumières sur retour au domicile (test)
          message: |
            Automation déclenchée {{ alias }}- sun_trig:({{ my_sun_condition }} ), 
            sun_elevation: '{{ states('sensor.sun_elevation') }}' vs sun_elevation_trig: {{ my_elevation }} 
            my_person_entity: '{{ my_person_entity }}'
            my_person_name: '{{ my_person_name }}'
            my_person_friendly_name: '{{ my_person_friendly_name }}' 
            my_device_notif:: '{{ my_device_notif }}'
            zone_state: '{{ zone_state }}'
            message: {{ states('input_text.message_automation_back_to_home') }}
            trigger_id: {{ trigger.entity_id }}
            triger state from {{ trigger.from_state.state }} to {{ trigger.to_state.state }}
#            nom: {{ trigger.event.data.name }}
#            pf: {{trigger.platform}}
#            time: {{trigger.now}}


              